%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 709.564394 391.476563
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A405) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 710 392
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 710 392
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: LucidaGrande
%!FontType1-1.0: LucidaGrande 1.0000.6.0040
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
14 dict begin/FontName /LucidaGrande def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /A put
dup 35 /B put
dup 36 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2186 1 index div -1509 2 index div 3361 3 index div 2381 5 -1 roll div]cvx def
/sfnts [<



2121591B212121592D2CB00243583DCD181BCD592D2C462346608A8A462320468A608A61B8FF8062232010238AB10C0C8A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A2D2C2045B0032546524BB013515B58B0022546206861B00325B003253F2321381B2111592D2C2045B00325465058B0022546206861B00325B003253F2321381B2111592D2C004BB0C8515800B00743B006430B592D2C8A10EC2D2CB00C4358211B2046B0005258B8FFF0381BB0103859592D2C20B0005558B8100063B003254564B00325456461B0005358B0021BB04061B00359254569535845441B2121591B21B0022545B00225456164B028515845441B212159592D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2C184B5358B00425B00425496423456469B0408B6120B080626AB00225B00225618CB00C2344218A10B00CF6211B218A11231220392F592D2CB00225B002254964B0C05458B8FFF838B008381B2121592D2CB0134358031B02592D2CB0134358021B03592D2CB00A2B2310203CB0172B2D2CB00225B8FFF038B0282B8A102320D023B0102BB0054358C01B3C59201011B00012012D2C4B53234B515A58381B2121592D2C01B0022510D023C901B00113B0001410B0013CB001162D2C01B00013B001B0032549B0031738B001132D2C4B53234B515A5820458A60441B2121592D2C184B5358B00425B004254964B00325B00325496468B0408B6120B080626AB00225B00225618CB00C234421B004251023B00CF61BB00425B0042511122320392F59CC21212D2C0118B0184358B0052546234564611B21B00425B004254A59B00E23442310B00EEC2310B00EEC2D2CB01B435820B0016045B000515820B0016020452068B0005558B0206044211B212121591B20B0016020452068B0005558B8FFE06044B01C4B50582045B02060441B21591B21212159591B21592D2C4B53234B515A58381B2121592D2C4B5458381B2121592D2C4B52587D1B7A592DB800532C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800542C2020456944B001602DB800552CB800542A212DB800562C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800572C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800582C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800592C2020456944B001602020457D691844B001602DB8005A2CB800592A2DB8005B2C4B20B00326






C8524BB036505BB00C234200
00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/C 3 def
/D 4 def
/ukcyrillic.alt 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-2186 -1509 3361 2381}def
/UniqueID 4261101 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C96AC05D8620AE2086072F250ADD3256490B02A185DDD3083C39A0A37A537BC048639785B6E6F90A8DE04DD6A0B7424D7C139EF296791E28BB8D00BB77A456A7007F12121D0ADB834BFF4C787DEF84F5644FA1142781104F4352C1690711E396EC92FA978646E163EF4F1A0F1F73A49CB2F1A64DF0E5A1F0DBB29703E21249F0CA18970F5964ED3567738916E6944870A7B1E35A08243BCFCB163AE6046FF6817D0E8D883BBFF2A41CAD7BEE794DE282D1CFDB3BA4374833D4F722C073161D45642DE0DC855924C920B3EA8EC54B7A98D42251FDC6A59C8FFD4359AC08A0AE0DE2657697475C34543D137694D4BE7162BA78E38DAF66776C03A18B563D4F0393497109B6F900B13618A00F5C5058BFA78B4894A7D6F5CCD35E6D5B1FC40F2094E5C64E12CDEB87E21EE28F95E41A1BACD7D2B6D66538D54EB134CA8954F0E088D8EC3010B0A74CE68D988C560729CA47B77B13937475ACD9FFFFF421574DD45461D35442417515600B0C9A4940B536CD02E935652E2D5ED43065EF958F8CDCBDB3BBC63A58D9B5C3E50D481DA085E33738C561C59647BD8A879042D6F9CE81B6365FDB19AADBDF36076880BD92ABDBC5E57F74FF06931C7092D39F98A13B50E83F566465DB2B81B87DF069DD1555CF77612F21A02569F0B41C34549B965287677B1646BDCB4E4519EAD6673C19020509397A87E93B222CBB1FADA05A97A799EC63BE7B53E7BBDB58740D2FFC7A0368CE55784BC2CDFE4E3B052CCCB2068DDFE784B
67E47AFE80A0CE63880CDF50EDD706A62CEB50236550EEC9939B416AD915FA51C741F3BD146558B2903805970F138B685FD074F3DD896B8DF250FB4D9F7D6329299EDAA6745BCFA7CE2C020F4B61F24CD29B8DC29DEB5FDC55A11123C0BB4A62E99D2FC41FCA5A42AA63746434E629C63E00BF46E12C4C721D62B67B2E2095B90D2D156DEDC5F3692CD7E63DEE85E4D8E667FD09A23CCD3ABCF2E0143EF244BCD7AD1C752033A6F9E4B8E9CCA7EE3AD13ABF78EEC97FEA282A3B00106DB10F53C1E7B897CFF7844BB6420F03B3E4FF6D21934F76FF9B7E51DD2372D38688CD21A19C11B677AF218494F18168422269E5A819665E7AB1B913644C5C2FC044EB137B90880EC724AD64D9A750768AFE9BB208F2AB3851DE68E367AEA164AE99A5E99AEE02F4A629E3F23E63B10F0417816F65ADD8227091B028B19E1B8723FBBBE0745176CDCD09E15B4690D270037AAE142C362F0825F517EE101E5BAEFB4146AEE2431BA622735D9F4A41D16A010E7D958DE7B7B1290A0A84546E782BD299808D2F4D2F89EA58D98617CE19B16D9E900EA051C45144C36C5847D0D6B65B7B3E10D63ED384463547AF4F1EBD79EAF1544109435B5EF31A02890D345892E08CFF0914A12FEEA9ADA3010ED0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/LucidaGrande cguidfix
/F1.1/LucidaGrande renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 709.56439 391.47656 rc
47.018639 173.49519 m
57.660473 162.85342 57.660473 145.5997 47.018639 134.95793 c
36.376858 124.31609 19.12314 124.31609 8.4813614 134.95793 c
-2.1604719 145.5997 -2.1604719 162.85342 8.4813614 173.49519 c
19.12314 184.13704 36.376858 184.13704 47.018639 173.49519 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
369.51865 163.48137 m
380.16046 174.12314 380.16046 191.37686 369.51865 202.01863 c
358.87686 212.66048 341.62314 212.66048 330.98135 202.01863 c
320.33954 191.37686 320.33954 174.12314 330.98135 163.48137 c
341.62314 152.83952 358.87686 152.83952 369.51865 163.48137 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 27.75 154.22656 cm
/F1.1[ 30 0 0 -30 0 0]sf
-10.378418 11.5 m
(!)s
/Cs1 SC
1 1 1 sc
CM
47.018639 276.99521 m
57.660473 266.35342 57.660473 249.0997 47.018639 238.45793 c
36.376858 227.81609 19.12314 227.81609 8.4813614 238.45793 c
-2.1604719 249.0997 -2.1604719 266.35342 8.4813614 276.99521 c
19.12314 287.63702 36.376858 287.63702 47.018639 276.99521 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
369.51865 59.981361 m
380.16046 70.623138 380.16046 87.876862 369.51865 98.518639 c
358.87686 109.16047 341.62314 109.16047 330.98135 98.518639 c
320.33954 87.876862 320.33954 70.623138 330.98135 59.981361 c
341.62314 49.339527 358.87686 49.339527 369.51865 59.981361 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 27.75 257.72656 cm
-10.349121 11.5 m
(")s
/Cs1 SC
1 1 1 sc
CM
163.01863 276.99521 m
173.66048 266.35342 173.66048 249.0997 163.01863 238.45793 c
152.37686 227.81609 135.12314 227.81609 124.48136 238.45793 c
113.83953 249.0997 113.83953 266.35342 124.48136 276.99521 c
135.12314 287.63702 152.37686 287.63702 163.01863 276.99521 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
485.51865 59.981361 m
496.16046 70.623138 496.16046 87.876862 485.51865 98.518639 c
474.87686 109.16047 457.62314 109.16047 446.98135 98.518639 c
436.33954 87.876862 436.33954 70.623138 446.98135 59.981361 c
457.62314 49.339527 474.87686 49.339527 485.51865 59.981361 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 143.75 257.72656 cm
-8.6279297 11.5 m
(#)s
/Cs1 SC
1 1 1 sc
CM
163.01863 173.49519 m
173.66048 162.85342 173.66048 145.5997 163.01863 134.95793 c
152.37686 124.31609 135.12314 124.31609 124.48136 134.95793 c
113.83953 145.5997 113.83953 162.85342 124.48136 173.49519 c
135.12314 184.13704 152.37686 184.13704 163.01863 173.49519 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
485.51865 163.48137 m
496.16046 174.12314 496.16046 191.37686 485.51865 202.01863 c
474.87686 212.66048 457.62314 212.66048 446.98135 202.01863 c
436.33954 191.37686 436.33954 174.12314 446.98135 163.48137 c
457.62314 152.83952 474.87686 152.83952 485.51865 163.48137 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 143.75 154.22656 cm
-11.235352 11.5 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
350.25 106.50002 m
350.25 145.59999 l
S
0 i
CM
27.75 183.37657 m
30.75 191.37657 l
24.75 191.37657 l
h
27.75 183.37657 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
350.25 153.59999 m
353.25 145.59999 l
347.25 145.59999 l
h
350.25 153.59999 m
S
1 J
1 j
0.60000002 i
370.58359 97.392456 m
438.52939 158.01651 l
S
0 i
CM
121.99871 173.63397 m
118.02666 181.19855 l
114.0321 176.72154 l
h
121.99871 173.63397 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
444.49872 163.34259 m
440.52667 155.77802 l
436.5321 160.25502 l
h
444.49872 163.34259 m
S
1 J
1 j
0.60000002 i
377.5 79.25 m
429.09998 79.25 l
S
0 i
CM
114.59998 257.72656 m
106.59998 260.72656 l
106.59998 254.72656 l
h
114.59998 257.72656 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
437.09998 79.25 m
429.09998 76.25 l
429.09998 82.25 l
h
437.09998 79.25 m
S
1 J
1 j
0.60000002 i
377.5 182.75 m
429.09998 182.75 l
S
0 i
CM
114.59998 154.22656 m
106.59998 157.22656 l
106.59998 151.22656 l
h
114.59998 154.22656 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
437.09998 182.75 m
429.09998 179.75 l
429.09998 185.75 l
h
437.09998 182.75 m
S
1 J
1 j
0.60000002 i
466.25 155.49998 m
466.25 116.40002 l
S
0 i
CM
143.75 228.57655 m
140.75 220.57655 l
146.75 220.57655 l
h
143.75 228.57655 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
466.25 108.40002 m
463.25 116.40002 l
469.25 116.40002 l
h
466.25 108.40002 m
S
1 J
1 j
0.60000002 i
546 -54 m
546 336.47656 l
S
[
4
4
] 0 d
631 128 m
1031.5645 128 l
S
819 -35 m
819 323.22562 l
S
0 i
1 1 1 sc
CM
369.51138 354.50244 m
380.15323 343.86066 380.15323 326.60696 369.51138 315.96518 c
358.8696 305.32333 341.61591 305.32333 330.97412 315.96518 c
320.33228 326.60696 320.33228 343.86066 330.97412 354.50244 c
341.61591 365.14429 358.8696 365.14429 369.51138 354.50244 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
692.01141 -17.525885 m
702.6532 -6.8841057 702.6532 10.369613 692.01141 21.011393 c
681.36963 31.653225 664.11591 31.653225 653.47412 21.011393 c
642.83228 10.369613 642.83228 -6.8841057 653.47412 -17.525885 c
664.11591 -28.167719 681.36963 -28.167719 692.01141 -17.525885 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 350.24277 335.2338 cm
-10.349121 11.5 m
(")s
/Cs1 SC
1 1 1 sc
CM
585.01141 361.00244 m
595.6532 350.36066 595.6532 333.10696 585.01141 322.46518 c
574.36963 311.82333 557.11591 311.82333 546.47412 322.46518 c
535.83228 333.10696 535.83228 350.36066 546.47412 361.00244 c
557.11591 371.64429 574.36963 371.64429 585.01141 361.00244 c
f
[
1
4
] 0 d
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -322.5 336.97656 cm
907.51141 -24.025885 m
918.1532 -13.384106 918.1532 3.8696132 907.51141 14.511393 c
896.86963 25.153225 879.61591 25.153225 868.97412 14.511393 c
858.33228 3.8696132 858.33228 -13.384106 868.97412 -24.025885 c
879.61591 -34.667717 896.86963 -34.667717 907.51141 -24.025885 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 565.74274 341.7338 cm
-10.349121 11.5 m
(")s
/Cs1 SC
1 1 1 sc
CM
686.51862 361.00244 m
697.16046 350.36066 697.16046 333.10696 686.51862 322.46518 c
675.87683 311.82333 658.62317 311.82333 647.98138 322.46518 c
637.33954 333.10696 637.33954 350.36066 647.98138 361.00244 c
658.62317 371.64429 675.87683 371.64429 686.51862 361.00244 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
1009.0186 -24.025885 m
1019.6605 -13.384106 1019.6605 3.8696132 1009.0186 14.511393 c
998.37683 25.153225 981.12317 25.153225 970.48138 14.511393 c
959.83954 3.8696132 959.83954 -13.384106 970.48138 -24.025885 c
981.12317 -34.667717 998.37683 -34.667717 1009.0186 -24.025885 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 667.25 341.7338 cm
-8.6279297 11.5 m
(#)s
/Cs1 SC
1 1 1 sc
CM
686.51862 271.99521 m
697.16046 261.35342 697.16046 244.0997 686.51862 233.45793 c
675.87683 222.81609 658.62317 222.81609 647.98138 233.45793 c
637.33954 244.0997 637.33954 261.35342 647.98138 271.99521 c
658.62317 282.63702 675.87683 282.63702 686.51862 271.99521 c
f
[
1
4
] 0 d
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -322.5 336.97656 cm
1009.0186 64.981361 m
1019.6605 75.623138 1019.6605 92.876862 1009.0186 103.51864 c
998.37683 114.16047 981.12317 114.16047 970.48138 103.51864 c
959.83954 92.876862 959.83954 75.623138 970.48138 64.981361 c
981.12317 54.339527 998.37683 54.339527 1009.0186 64.981361 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 667.25 252.72656 cm
-11.235352 11.5 m
($)s
[] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
915.49274 -4.7572465 m
952.59998 -4.7572465 l
S
0 i
CM
638.09998 341.7338 m
630.09998 344.7338 l
630.09998 338.7338 l
h
638.09998 341.7338 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
960.59998 -4.7572465 m
952.59998 -7.7572465 l
952.59998 -1.7572464 l
h
960.59998 -4.7572465 m
S
1 J
1 j
0.60000002 i
989.75 56.999985 m
989.75 32.392769 l
S
0 i
CM
667.25 312.5838 m
664.25 304.5838 l
670.25 304.5838 l
h
667.25 312.5838 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
989.75 24.392767 m
986.75 32.392769 l
992.75 32.392769 l
h
989.75 24.392767 m
S
1 1 1 sc
CM
369.51138 69.995201 m
380.15323 59.35342 380.15323 42.099705 369.51138 31.457924 c
358.8696 20.81609 341.61591 20.81609 330.97412 31.457924 c
320.33228 42.099705 320.33228 59.35342 330.97412 69.995201 c
341.61591 80.637032 358.8696 80.637032 369.51138 69.995201 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
692.01141 266.98135 m
702.6532 277.62314 702.6532 294.87686 692.01141 305.51865 c
681.36963 316.16046 664.11591 316.16046 653.47412 305.51865 c
642.83228 294.87686 642.83228 277.62314 653.47412 266.98135 c
664.11591 256.33954 681.36963 256.33954 692.01141 266.98135 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 350.24277 50.726562 cm
-10.378418 11.5 m
(!)s
/Cs1 SC
1 1 1 sc
CM
369.51138 159.00244 m
380.15323 148.36067 380.15323 131.10695 369.51138 120.46517 c
358.8696 109.82333 341.61591 109.82333 330.97412 120.46517 c
320.33228 131.10695 320.33228 148.36067 330.97412 159.00244 c
341.61591 169.64429 358.8696 169.64429 369.51138 159.00244 c
f
[
1
4
] 0 d
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -322.5 336.97656 cm
692.01141 177.97412 m
702.6532 188.61589 702.6532 205.86961 692.01141 216.5114 c
681.36963 227.15323 664.11591 227.15323 653.47412 216.5114 c
642.83228 205.86961 642.83228 188.61589 653.47412 177.97412 c
664.11591 167.33228 681.36963 167.33228 692.01141 177.97412 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 350.24277 139.73381 cm
-10.349121 11.5 m
(")s
[] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
672.74274 224.49277 m
672.74274 249.09999 l
S
0 i
CM
350.24277 79.876579 m
353.24277 87.876579 l
347.24277 87.876579 l
h
350.24277 79.876579 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
672.74274 257.09998 m
675.74274 249.09999 l
669.74274 249.09999 l
h
672.74274 257.09998 m
S
1 1 1 sc
CM
585.01141 69.995201 m
595.6532 59.35342 595.6532 42.099705 585.01141 31.457924 c
574.36963 20.81609 557.11591 20.81609 546.47412 31.457924 c
535.83228 42.099705 535.83228 59.35342 546.47412 69.995201 c
557.11591 80.637032 574.36963 80.637032 585.01141 69.995201 c
f
1 J
1 j
[
1
4
] 0 d
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -322.5 336.97656 cm
907.51141 266.98135 m
918.1532 277.62314 918.1532 294.87686 907.51141 305.51865 c
896.86963 316.16046 879.61591 316.16046 868.97412 305.51865 c
858.33228 294.87686 858.33228 277.62314 868.97412 266.98135 c
879.61591 256.33954 896.86963 256.33954 907.51141 266.98135 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 565.74274 50.726562 cm
-10.378418 11.5 m
(!)s
/Cs1 SC
1 1 1 sc
CM
686.51862 69.995201 m
697.16046 59.35342 697.16046 42.099705 686.51862 31.457924 c
675.87683 20.81609 658.62317 20.81609 647.98138 31.457924 c
637.33954 42.099705 637.33954 59.35342 647.98138 69.995201 c
658.62317 80.637032 675.87683 80.637032 686.51862 69.995201 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
1009.0186 266.98135 m
1019.6605 277.62314 1019.6605 294.87686 1009.0186 305.51865 c
998.37683 316.16046 981.12317 316.16046 970.48138 305.51865 c
959.83954 294.87686 959.83954 277.62314 970.48138 266.98135 c
981.12317 256.33954 998.37683 256.33954 1009.0186 266.98135 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 667.25 50.726562 cm
-11.235352 11.5 m
($)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
915.49274 286.25 m
952.59998 286.25 l
S
0 i
CM
638.09998 50.726562 m
630.09998 53.726562 l
630.09998 47.726562 l
h
638.09998 50.726562 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
960.59998 286.25 m
952.59998 283.25 l
952.59998 289.25 l
h
960.59998 286.25 m
S
1 J
1 j
0.60000002 i
445.91641 97.392456 m
377.97061 158.01651 l
S
0 i
CM
49.501293 173.63397 m
57.467899 176.72154 l
53.473339 181.19855 l
h
49.501293 173.63397 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
372.00128 163.34259 m
379.9679 160.25502 l
375.97333 155.77802 l
h
372.00128 163.34259 m
S
1 1 1 sc
CM
462.01865 159.00244 m
472.66046 148.36067 472.66046 131.10695 462.01865 120.46517 c
451.37686 109.82333 434.12314 109.82333 423.48135 120.46517 c
412.83954 131.10695 412.83954 148.36067 423.48135 159.00244 c
434.12314 169.64429 451.37686 169.64429 462.01865 159.00244 c
f
1 J
1 j
[
1
4
] 0 d
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -322.5 336.97656 cm
784.51862 177.97412 m
795.16046 188.61589 795.16046 205.86961 784.51862 216.5114 c
773.87683 227.15323 756.62317 227.15323 745.98138 216.5114 c
735.33954 205.86961 735.33954 188.61589 745.98138 177.97412 c
756.62317 167.33228 773.87683 167.33228 784.51862 177.97412 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 442.75 139.73381 cm
-8.6279297 11.5 m
(#)s
[] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
745.6134 216.13641 m
699.51337 260.49225 l
S
0 i
CM
371.2485 70.937569 m
379.09341 74.322495 l
374.93335 78.646141 l
h
371.2485 70.937569 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
693.74854 266.039 m
701.59338 262.65405 l
697.43335 258.33041 l
h
693.74854 266.039 m
S
1 1 1 sc
CM
585.01141 159.00244 m
595.6532 148.36067 595.6532 131.10695 585.01141 120.46517 c
574.36963 109.82333 557.11591 109.82333 546.47412 120.46517 c
535.83228 131.10695 535.83228 148.36067 546.47412 159.00244 c
557.11591 169.64429 574.36963 169.64429 585.01141 159.00244 c
f
1 J
1 j
[
1
4
] 0 d
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -322.5 336.97656 cm
907.51141 177.97412 m
918.1532 188.61589 918.1532 205.86961 907.51141 216.5114 c
896.86963 227.15323 879.61591 227.15323 868.97412 216.5114 c
858.33228 205.86961 858.33228 188.61589 868.97412 177.97412 c
879.61591 167.33228 896.86963 167.33228 907.51141 177.97412 c
S
/Cs3 SC
0 sc
0 i
1 0 0 -1 565.74274 139.73381 cm
-10.349121 11.5 m
(")s
[] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -322.5 336.97656 cm
908.73236 215.20917 m
961.81677 261.75656 l
S
0 i
CM
645.33185 69.945641 m
641.29462 77.475655 l
637.33887 72.96434 l
h
645.33185 69.945641 m
f
0 J
0 j
1 0 0 -1 -322.5 336.97656 cm
967.83185 267.03091 m
963.79462 259.50092 l
959.83887 264.01221 l
h
967.83185 267.03091 m
S
ep
end
%%Trailer
%%EOF
